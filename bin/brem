#!/bin/sh
set -e

##### BREM PATH LOCATION #####
# If this does not work, you can write the path to brem yourself.

BREM_PATH="$0"
if [ ! -e "$BREM_PATH" ]; then
  case $BREM_PATH in
    (*/*) exit 1;;
    (*) BREM_PATH=$(command -v -- "$BREM_PATH") || exit;;
  esac
fi
dir=$(
  cd -P -- "$(dirname -- "$BREM_PATH")" && pwd -P
) || exit
BREM_PATH=$dir/$(basename -- "$BREM_PATH") || exit

##### BREM PATH LOCATION #####

rempath="$HOME/.config/brem-reminders"

GetVersion() {
    version="v1.3.1"
    printf '%s\n' "$version"
}

CreateSource() {
    printf "# Entries from bash reminder\n" >> "$rempath"
    chmod +x "$rempath"
}

Help() {
    printf "For this program to work as intended, add this line to the bottom of your .bashrc file:\n"
    printf "  brem --show\n"
    printf "Or use the flag --add-to-bashrc to do it for you\n"
    printf "Usage:\n"
    printf "  brem                    Creates \$HOME/.config/brem-reminders file\n"
    printf "  brem -a                 Add an entry inside the reminders file\n"
    printf "  brem -r                 Remove an entry [or multiple entries, seperated with \",\"]\n"
    printf "  brem -rn                Renumber entries inside the reminders file\n"
    printf "  brem -R                 Remove \$HOME/.config/brem-reminders file\n"
    printf "  brem --show             Prints your reminders to the terminal\n"
    printf "  brem --add-to-sh        Adds reminder autodetection inside bash|zsh|fish\n"
    printf "  brem --version          Prints what version of brem you have installed\n"
    printf "Usage with rofi:\n"
    printf "  brem --rofi-menu        Shows all available rofi options in a neat menu\n"
    printf "  brem --rofi-show        Prints your reminders in a rofi window\n"
    printf "  brem --rofi-add         Adds entry through rofi\n"
    printf "  brem --rofi-remove      Remove an entry through a rofi menu\n"
}

AddReminder() {
    if ! [ -f "$rempath" ]; then
       echo "Reminders file doesn't exist!"
       echo "Do you want to create it? [Y/n]: "
       read -r create_choice
       if ! [ "$create_choice" = "n" ]; then
           CreateSource
           printf 'echo \"[1] - %s\"\n' "$reminder" >> "$rempath"
       fi

    else
        echo_num=1
        while read -r line; do
            if echo "${line}" | grep -q "echo"; then
                echo_num=$((echo_num+1))
            fi
        done < "$rempath"
        printf 'echo "[%s] - %s"\n' "$echo_num" "$reminder" >> "$rempath"
    fi
}

RemoveReminder() {
if [ "${#remove_num}" -gt 0 ]; then
    remove_nums=$(echo "$remove_num" | tr ',' ' ')
    for i in $remove_nums; do
        remove_num="$i"
        Removal
    done
fi
}

Removal() {
if [ -f "$rempath" ]; then
    tmpfilerem=$(mktemp "/tmp/tmp.rem${script_pid}.XXXXX") || { echo "Failed to create tmp file"; exit 1; }
    sed -i "/echo \"\[$remove_num\] -/w $tmpfilerem" "$rempath"
    if [ -s "$tmpfilerem" ];then
        # I have absolutely no idea how this works, BUT IT DOES.
        # Only deletes the first line that matches a pattern.
        sed -i "x;/./{x;b};x;/echo \"\[$remove_num\] -/{h;d}" "$rempath"
        rm "$tmpfilerem"
    else
        printf 'Entry [%s] not found.\n' "$remove_num"
        rm "$tmpfilerem"
    fi
else
    echo "Reminders file doesn't exist!"
fi
}

RofiAdd() {
    if ! [ -f "$rempath" ]; then
        create_choice=$(printf "Yes\nNo" | rofi -dmenu -p "Create reminders file?" -i -mesg "Reminders file does not exist!")

        if ! [ "$create_choice" = "No" ]; then
            CreateSource
            reminder=$(sh -c "echo \"$reminder\"")
            printf 'echo "[1] - %s"\n' "$reminder" >> "$rempath"
        fi

    else
        echo_num=1
        while read -r line; do
            if echo "${line}" | grep -q "echo"; then
                echo_num=$((echo_num+1))
            fi
        done < "$rempath"
        reminder=$(sh -c "echo \"$reminder\"")
        printf 'echo "[%s] - %s"\n' "$echo_num" "$reminder" >> "$rempath"
    fi
}

Renumber() {
    echo_num=1
    line_num=1
    script_pid="$$"
    trap 'rm -f "$tmpfile"' EXIT
    tmpfile=$(mktemp "/tmp/tmp.${script_pid}.XXXXX") || { echo "Failed to create tmp file"; exit 1; }
    cat "$rempath" > "$tmpfile"

    while read -r line; do
        if echo "${line}" | grep -q "echo"; then
            sed -E -i "${line_num}s/\[([0-9])+\] -/[$echo_num] -/" "$tmpfile"

            echo_num=$((echo_num+1))
        fi
    line_num=$((line_num+1))
    done < "$rempath"
    cat "$tmpfile" > "$rempath"
    rm "$tmpfile"
}

RofiMenu() {
    option1="  Show reminders"
    option2="+  Add entry"
    option3="-  Remove entry"
    option4="#  Renumber"
    option5="  Exit"

    options="$option1\n$option2\n$option3\n$option4\n$option5"

    choice=$(printf '%b' "$options" | rofi -dmenu -i -no-show-icons -lines 5 -width 30 -p "brem: " -location 0 -yoffset 0 -fixed-num-lines true)

    case "$choice" in
    	"$option1")
    		"$BREM_PATH" --rofi-show ;;
    	"$option2")
    		"$BREM_PATH" --rofi-add ;;
    	"$option3")
    		"$BREM_PATH" --rofi-remove ;;
    	"$option4")
    		"$BREM_PATH" -rn ;;
    	"$option5")
    		echo "Exit" ;;
    esac
}

# If brem is run without args, create $rempath if nonexistant and show help if it exists
if [ "$#" -eq 0 ]; then
    if [ ! -f "$rempath" ]; then
        CreateSource
        echo "Created reminders file!"
        echo "To add a reminder, use the -a flag"
        echo "To remove the file, use the -R flag"
    else
        Help
    fi
fi

while [ "$#" -gt 0 ]; do
    case "$1" in
        "-R"|"--reset")
            if [ -f "$rempath" ]; then
            rm "$rempath"
            fi;;

        "-a"|"--add")
            if ! [ "$2" = "" ]; then
                reminder="$2"
                AddReminder
                shift
            else
                echo "String empty, cannot create reminder."
            fi;;

        "-r"|"--remove")
                if ! [ "$2" = "" ]; then
                    remove_num="$2"
                    RemoveReminder
                    shift
                else
                    echo "String empty."
                fi;;

        "-rn"|"--renumber") Renumber;;

        "-h"|"--help") Help;;

        "--add-to-sh"|"--add-to-bashrc") # --add-to-bashrc is deprecated and will be removed in the future
            echo "THIS WILL MODIFY YOUR SHELL'S CONFIG FILE."
            echo "It will append \"brem --show\" to the end of the file"
            echo "Pick a shell:"
            echo "[1] - bash   (.bashrc)"
            echo "[2] - zsh    (.zshrc)"
            echo "[3] - fish   (.config/fish/config.fish)"
            echo "[4] - custom (specify path)"
            printf ": "; read -r sh_choice

            case "$sh_choice" in
                1|bash)
                [ ! -f "$HOME"/.bashrc ] && echo "ERROR: .bashrc not found!" && exit 1
                printf '\n# Initialize bash reminders\nbrem --show' >> "$HOME"/.bashrc
                echo "Successfully added brem to .bashrc"
                exit 0
                ;;

                2|zsh)
                [ ! -f "$HOME"/.zshrc ] && echo "ERROR: .zshrc not found!" && exit 1
                printf "\n# Initialize bash reminders\nbrem --show" >> "$HOME"/.zshrc
                echo "Successfully added brem to .zshrc"
                exit 0
                ;;

                3|fish)
                [ ! -f "$HOME"/.config/fish/config.fish ] && echo "ERROR: config.fish not found!" && exit 1
                printf "\n# Initialize bash reminders\nbrem --show" >> "$HOME"/.config/fish/config.fish
                echo "Successfully added brem to .config/fish/config.fish"
                exit 0
                ;;

                4|custom)
                printf "Path to config file (absolute path):\n> "; read -r custom_path
                [ ! -f "$custom_path" ] && printf 'ERROR: %s not found!\n' "$custom_path" && exit 1
                printf "\n# Initialize bash reminders\nbrem --show" >> "$custom_path"
                printf 'Successfully added brem to %s' "$custom_path"
                exit 0
                ;;

                *) echo "Invalid option." && exit 1;;
            esac;;

        "--show")
            if [ -f "$rempath" ]; then
                echo_num=0
                while read -r line; do
                    if echo "${line}" | grep -q "echo"; then
                        echo_num=$((echo_num+1))
                    fi
                done < "$rempath"

                # If there aren't any echos in file, dont print banner
                if ! [ "$echo_num" = 0 ]; then

                    echo "################ Reminders ###############"
                    . "$rempath"
                    echo "##########################################"
                    echo ""
                fi

            fi;;

        "--rofi-show") "$rempath" | rofi -dmenu -p "Reminders";;

        "--rofi-add")
            reminder=$(rofi -dmenu -p "Add:" < /dev/null)
            RofiAdd;;

        "--rofi-remove")
            remove_num=$("$rempath" | rofi -dmenu -p "Remove:")
            remove_num=${remove_num%%-*}
            remove_num=$(echo "$remove_num" | grep -o '[0-9]*')
            RemoveReminder;;

        "--rofi-menu")
            RofiMenu;;

        "--version")
            GetVersion;;

           *) printf 'Unknown argument passed: %s\n' "$1"; exit 1;;

    esac
    shift
done
