#+TITLE: My Emacs Config
#+AUTHOR: K_lar
#+DATE: Thu Aug 11 06:03:32 2022

* Why Emacs?
** History
For a year and a half, I have spent countless hours configuring vim to do exactly what I want and how I want. So now I'm asking myself why exactly am I in the middle of configuring another text editor? A couple years ago I was trash talking the usage of vim as I saw it as dinosaurs and hipsters using old tools because that's what they were used to and I didn't really let anyone convince me otherwise. A couple years passed, and I've tested out a couple text editors and IDEs in that time span. Some notable examples include VSCode, Sublime Text, Geany, Notepad++, Thonny and DevC++ if I'm remembering correctly.
After experiencing either slowdowns or a lack of features in the above mentioned editors, I finally gave in and tried the infamous vim (nvim). I hated every single second of it the first couple hours, but I slugged through the tutorial time and time again so I would get the speed gains I was promised with time. I didn't do much coding in vim at the time (yet), but since I truly wanted to become better at just using vim, I said out to exclusively use vim for my text editing for my school. Using markdown, it was simple, but there was something beautiful about the whole process and I fell in love with plaintext files. Wanting experience with version control and the added benefit of helping my schoolmates, I put all of my notes in a Git repository and kept it up and running until we were done with the year.
At the end of my journey in school with vim, I had 430+ lines of (almost) handwritten vimscript and lua in my .vimrc file and I was proud of it. *I had made it my own.*

** What went wrong with vim?
I loved the terminal, and I still do. But I figured out with time that no matter how hard I tried, I couldn't see pictures inside vim. I couldn't render math latex formulas inside the terminal. I couldn't use tables very well as they are fairly dissapointing in markdown. The native autocompletion in nvim is horrendous to configure and just figure out on your own. As nvim gains more popularity and people start making plugins in Lua instead of vimscript, we get a flood of VERY unreadable plugin configuration, with tons of needless options and "modularity". I say "modularity" because I for the life of me do not get why I would need to use 40+ lines of Lua code to get basic autocompletion when there are simpler (albeit slower) pure vimscript plugins that are basically plug and play. I don't particularly agree with the clusterfuck of options and unusable documentation for most plugins that are currently plaguing the nvim scene. I did like them for a long time but as my configuration grew, it became more and more unreadable and maintaining it felt like a chore instead of something I did out of enjoyment.

** Why Emacs instead?
*Org-mode.* That's mostly the reason behind me jumping head first into completely unknown teritorry. Although it isn't the only thing that got my attention. Since it's a GUI program it can magically render images inside plaintext files, it can render math formulas written in latex and other graphical features. I also kinda dig the idea of "living inside your editor". I was trying to achieve that with vim as much as I could, but didn't really notice it. Sadly that isn't possible with vim (yet) because of the philosophical differences the two userbases. Eventually it will get there and I'll cheer it on while the community develops better and better plugins, but I'll be staying here for a while. Org-mode was particularly interesting for me, since I'll be starting college soon and I want/need something more powerful for taking my notes. I feel like org-mode is the single most powerful markup language and I don't get why it isn't ported into other editors.


* Initialization and automation (use-package)
The "use-package" package is needed to keep the configuration cleaner, as it allows for manipulating options of packages in a way that makes it look more readable and easier to manage. It's also used for automatic installation of other packages in use in this config.

#+BEGIN_SRC emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)



  (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))


  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
    (require 'use-package)

  ;; For adding .el files/plugins directly
  (add-to-list 'load-path "~/.emacs.d/lisp/")
 #+END_SRC


* User Interface Configuration
** Menu bars and transparency
I don't want my Emacs to be transparent, since it disturbs my workflow and I think it makes it harder to read the font. After that, I turn off all the unnecessery garbage that Emacs has on my default (menu bar, scroll bar, tool bar, etc.)

#+BEGIN_SRC emacs-lisp
  ;; Make Emacs not transparent
  (set-frame-parameter (selected-frame) 'alpha '(100 100))
  (add-to-list 'default-frame-alist '(alpha 100 100))

  ;; Keyboard-centric user interface
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
  (global-visual-line-mode 1)
#+END_SRC

** Fonts and encoding
Set everything to use UTF-8 encoding, and use my fonts.

#+BEGIN_SRC emacs-lisp
  ;; Font config
  (set-face-attribute 'default nil :height 130)
  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "IBM Plex Mono" :height 130)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "IBM Plex Serif" :height 145 :weight 'regular)

  ;; Use UTF-8 everywhere
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)

#+END_SRC

** Visible bell
Emacs has a visual bell when something of note happens in the buffer. By default this flashes the top and bottom lines of the screen which I find distracting. The bell here is configured so that it flashes the modeline text, which is still visible but less distracting and jarring when it happens.

#+BEGIN_SRC emacs-lisp
  ;; Set up the visible bell (subtle flash in modeline)
  (setq ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line "#F2804F")
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))

#+END_SRC

** Smoother scrolling
Using this because emacs likes to jump around a bit after reaching the end of the buffer visible area.

#+begin_src emacs-lisp
  ;(setq scroll-step 1) Don't use this, it can cause a display lock up!
  (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)
#+end_src

** Relative numbers
Since I'm used to relative numbers from vim, I'll also use them here (except in certain modes)

#+BEGIN_SRC emacs-lisp
  ;; Relative numbers (disable it for some modes)
  (global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  (dolist (mode '(org-mode-hook
                      term-mode-hook
                      eshell-mode-hook
                      vterm-mode-hook
                      dired-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+END_SRC

** Theme (Gruvbox)
I'm a sucker for gruvbox and that's why I'm using it here.

#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :config
    (load-theme 'gruvbox-dark-medium t))

  ;; For better contrast, use this instead
  ;;(use-package ef-themes
  ;;  :config
  ;;  (load-theme 'ef-autumn))
  
#+END_SRC


* Org-mode
I wanted a simple template for newly created .org files, and it's done in a relatively hacky way because I can't figure out anything better that works.
Use org-tempo, so you don't have to type out whole code block boilerplate with =<el=, or =<py=, or =<sh= and press TAB to have it insert the thing for you.

#+BEGIN_SRC emacs-lisp
  ;; Org-mode template
  (define-skeleton org-template
    "Insert some org boilerplate"
    "Puts cursor on the _"
     >"#+TITLE:" _ " " \n
     "#+AUTHOR: " \n
     "#+DATE: " (current-time-string) \n
     "#+OPTIONS: tex:t" \n
     "#+STARTUP: latexpreview" \n
     )

  ;; Org-mode initialization
  (add-hook 'org-mode-hook
            (lambda ()
              (if (= (buffer-size) 0)
                  (org-template))
              ))

  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  ;; Activate org-mode for certain stuff
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
  (setq org-ellipsis " ⤵")
  (use-package org-bullets ;; Pretty bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; Automatic LaTeX preview off when cursor is above it
  (use-package org-fragtog
    :after org
    :hook (org-mode . org-fragtog-mode))

  ;; Function to setup org fonts
  (defun klar/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "IBM Plex Serif" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  ;; Improve org mode looks
  (setq org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300)
        org-preview-latex-default-process 'dvisvgm)

  ;; Set LaTeX scaling for Org-Mode
  (setq klar/org-latex-scale 1.75)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale klar/org-latex-scale))

  ;; Set Org-Babel languages
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (setq org-confirm-babel-evaluate nil)

  ;; Code block templates
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

  ;; Org-download for drag-and-dropping images into Emacs
  (use-package org-download
    :after org)

  (add-hook 'dired-mode-hook 'org-download-enable)

#+END_SRC



* EVIL
Compatibility layer to get modal editing that feels like vim. Also using doom packages because they lead development in vim-like features.

#+BEGIN_SRC emacs-lisp
  ;; Evil mode initialization
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  ;; Better mode-line
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 10))
    )
  (setq doom-modeline-modal-icon nil)

  ;; General EVIL keybindings on most popular emacs thingies
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))


#+END_SRC


* Undo system
Set up an undo/redo system and make it work with evil mode (u/ctrl+r)

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init (global-undo-tree-mode))
  (evil-set-undo-system 'undo-tree)
#+end_src


* General package (leader)
The leader key package.

#+BEGIN_SRC emacs-lisp
  ;; General package (leader key)
  (use-package general
    :config
    (general-create-definer klar/leader-keys
    :prefix "SPC"))

  (general-define-key
    :states 'normal
    :keymaps 'override
    :prefix "SPC"
    "f" 'find-file
    "d" 'dired
    "b" 'bs-show
    "t" 'vterm
    "z o" 'zone
    "g" 'magit-status)

#+END_SRC


* QOL Stuff
Just some sane default settings in terms of practicality and usability for me. Window movement is easier, designated backup folder and =custom_vars.el= file for removing clutter from the config file.

#+BEGIN_SRC emacs-lisp
  ;; Escape actually quits most prompts now
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Never have to answer a prompt with a yes or a no
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Move customization variables to a seperate file and load it
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  ;; Better autocompletion in M-x and C-x
  ;;(require 'ido)
  ;;(ido-mode t)
  ;;(use-package smex)
  ;;;;(require 'smex)
  ;;(smex-initialize)
  ;;(global-set-key (kbd "M-x") 'smex)
  ;;(global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;;(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command) ;; This is your old M-x.

  ;; Backup files directory
  (setq backup-directory-alist '(("." . "~/.emacs_saves")))

  ;; Don't pop up UI dialogs when prompting
  (setq use-dialog-box nil)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

#+END_SRC


 
* Better completion


#+BEGIN_SRC emacs-lisp
  ;; Ivy for better completion and dependency for other packages
  ;(use-package ivy
  ;  :diminish
  ;  :bind (("C-s" . swiper)
  ;         :map ivy-minibuffer-map
  ;         ("TAB" . ivy-alt-done)
  ;         ("C-l" . ivy-alt-done)
  ;         ("C-j" . ivy-next-line)
  ;         ("C-k" . ivy-previous-line)
  ;         :map ivy-switch-buffer-map
  ;         ("C-k" . ivy-previous-line)
  ;         ("C-l" . ivy-done)
  ;         ("C-d" . ivy-switch-buffer-kill)
  ;         :map ivy-reverse-i-search-map
  ;         ("C-k" . ivy-previous-line)
  ;         ("C-d" . ivy-reverse-i-search-kill))
  ;  :config
  ;  (ivy-mode 1))

  ;(use-package ivy-rich
  ;  :init
  ;  (ivy-rich-mode 1))

  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

  ;; Better searching/matching
  (use-package orderless
    :ensure t
    :init
    (setq completion-styles '(orderless)
      completion-category-defaults nil
      completion-category-overrides '((file (styles . (partial-completion))))))

  ;; Counsel replacement
  (use-package consult
    :ensure t
    :bind ("C-s" . consult-line))


  ;; Counsel for better built-in functions
  ;(use-package counsel
  ;:bind (("M-x" . counsel-M-x)
  ;       ("C-x b" . counsel-ibuffer)
  ;       ("C-x C-f" . counsel-find-file)
  ;       :map minibuffer-local-map
  ;       ("C-r" . 'counsel-minibuffer-history)))
#+END_SRC


* Packages
** Org-mode
Org-bullets makes org-mode a little prettier, with UTF-8 bullets and other customizations that you can do.
Don't exactly know what org-appear does...

#+BEGIN_SRC emacs-lisp
  ;; Org setup
  (use-package org
    :config
    (require 'org-tempo)
    (setq org-startup-with-inline-images t))

  (add-hook 'org-mode-hook 'klar/org-font-setup)


  ;; Pretty bullets
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  ;; Show hidden emphasis markers
  (use-package org-appear
    :hook (org-mode . org-appear-mode))


#+END_SRC

** Markdown-mode
For editing markdown files.

#+BEGIN_SRC emacs-lisp
  ;; Markdown package
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))

#+END_SRC

** Magit
The best Git interface known to man.

#+BEGIN_SRC emacs-lisp
  ;; Magit configuration
  (use-package magit
    :bind ("C-x g" . magit-status))

#+END_SRC

** Which-key
Very helpful package that shows you what keys you can press with the modifier keys (C-, M-, S-)

#+BEGIN_SRC emacs-lisp
  ;; Which key shows all possible prefixes for C-x or C-h and stuff
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.5))

#+END_SRC

** Vterm
The better terminal for Emacs.

#+BEGIN_SRC emacs-lisp
  ;; Install vterm for better built in terminal
  (use-package vterm
    :ensure t)

#+END_SRC

** Rainbow delimiters
Rainbow perentheses for clearer coding.

#+BEGIN_SRC emacs-lisp
  ;; Rainbow delimiters for an easier time matching perentheses
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+END_SRC

** Visual Column Fill
To center text in org-mode.

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :hook (org-mode . org-mode-visual-fill))
#+END_SRC
